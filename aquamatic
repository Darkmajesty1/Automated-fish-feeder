#include <Servo.h>

Servo myservo;
int pos = 0;
const int ROTATION_TIME = 20; // Adjusted rotation time in milliseconds
unsigned long lastRotationTime = 0; // Variable to store the last rotation time
int numRotations = 0; // Variable to store the number of rotations
int rotationCounter = 0; // Variable to count the number of rotations

void setup() {
  Serial.begin(9600); // Initialize serial communication
  myservo.attach(7);
  myservo.write(0);
  delay(15);
}

void loop() {
  if (numRotations > 0) {
    unsigned long currentTime = millis();
    if (currentTime - lastRotationTime >= ROTATION_TIME) {
      rotateServo();
      lastRotationTime = currentTime;
    }
  }

  if (Serial.available() > 0) { // Check if data is available to read
    String input = Serial.readStringUntil('\n'); // Read the input from serial
    int commaIndex = input.indexOf(','); // Find the index of the comma
    if (commaIndex != -1) { // If comma is found
      String numRotationsStr = input.substring(0, commaIndex); // Extract number of rotations
      numRotations = numRotationsStr.toInt(); // Convert to integer
      String rotationIntervalStr = input.substring(commaIndex + 1); // Extract rotation interval
      unsigned long rotationInterval = rotationIntervalStr.toInt() * 1000; // Convert to milliseconds
      
      // Perform rotations
      performRotations(numRotations, rotationInterval);
    }
  }
}

void performRotations(int rotations, unsigned long interval) {
  for (int j = 0; j < rotations; j++) { // Loop for the desired number of rotations
    // Rotate the servo to the feeding position
    for (pos = 0; pos < 180; pos++) {
      myservo.write(pos);
      delay(ROTATION_TIME);
    }

    // Rotate the servo back to the original position
    for (pos = 180; pos >= 1; pos--) {
      myservo.write(pos);
      delay(ROTATION_TIME);
    }

    // If there is an interval, wait for it
    if (interval > 0) {
      delay(interval);
    }
  }

  // Reset rotation count and number of rotations
  rotationCounter = 0;
  numRotations = 0;
}

void rotateServo() {
  // Rotate the servo to the feeding position
  for (pos = 0; pos < 180; pos++) {
    myservo.write(pos);
    delay(ROTATION_TIME);
  }

  // Rotate the servo back to the original position
  for (pos = 180; pos >= 1; pos--) {
    myservo.write(pos);
    delay(ROTATION_TIME);
  }
}
